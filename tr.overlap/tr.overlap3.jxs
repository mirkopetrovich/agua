<jittershader name="edgeblend">
	<description>
	generates gradient alpha for edge-blending
	</description>

	<param name="fade" type="float" default="0.1">
		<description>fade</description>
	</param>
	<param name="center" type="float" default="0.1" />
	<param name="gamma" type="float" default="1." />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="fade" program="fp" />
		<bind param="center" program="fp" />
		<bind param="gamma" program="fp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

// Andrew Benson - andrewb@cycling74.com
//Copyright 2006 - Cycling '74

//fragment shader for generating alpha-gradient

//setup for 2 texture
varying vec2 texcoord0;
varying vec2 texdim0;
uniform sampler2DRect tex0;

//wipe state
uniform float fade;
uniform float center;
uniform float gamma;

void main()
{   
	vec2 nc = texcoord0/texdim0;//normalized coordinates
	float thd = step(nc.x,0.3333);
	float a2thd = step(nc.x,0.6666);
	vec2 nc1 = nc*vec2(1.+center,1.);//normalized coordinates
	vec2 nc2 = (nc*vec2(1.+(2.*center),1.))-vec2(center,0.);
	vec2 nc3 = nc1-vec2(center,0.);
	vec4 a = texture2DRect(tex0, mix(mix(nc3,nc2,a2thd),nc1,thd)*texdim0);
	float fad = abs(fade);
	// calculate edgefading
	float dist = abs(nc.x-0.3333)*0.5;
	fad = smoothstep(0.,fad,dist);
	dist = abs(nc.x-0.6666)*0.5;
	fad = smoothstep(0.,abs(fade),dist)*fad;
	fad = pow(fad,gamma);
	
	vec4 wiped = vec4(a.rgb,fad);
	
	// output texture
	gl_FragColor = vec4 (wiped);
}
]]>
		</program>
	</language>
</jittershader>
